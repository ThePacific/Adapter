import com.pacific.buildsrc.BuildPlugins
import com.pacific.buildsrc.Libs

apply plugin: BuildPlugins.androidLibrary
apply plugin: BuildPlugins.kotlinAndroid
apply plugin: BuildPlugins.kotlinAndroidExtensions
apply plugin: BuildPlugins.jetbrainsAndroidExtensions
apply plugin: BuildPlugins.kotlinxSerialization
apply plugin: BuildPlugins.kotlinKapt
apply plugin: BuildPlugins.mavenPublishPlugin

android {
    compileSdkVersion Libs.AndroidSdk.compileSdkVersion
    buildToolsVersion Libs.AndroidSdk.buildToolsVersion
    defaultConfig {
        minSdkVersion Libs.AndroidSdk.minSdkVersion
        targetSdkVersion Libs.AndroidSdk.targetSdkVersion
        versionCode Libs.AndroidSdk.versionCode
        versionName Libs.AndroidSdk.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    libraryVariants.all {
        it.generateBuildConfigProvider.get().enabled = false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation Libs.AndroidX.annotation
    implementation Libs.AndroidX.Recyclerview.recyclerview
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

mavenPublish {
    releaseSigningEnabled = true
    targets {
        uploadArchives {
            releaseRepositoryUrl = properties.getProperty("RELEASE_REPOSITORY_URL")
            snapshotRepositoryUrl = properties.getProperty("SNAPSHOT_REPOSITORY_URL")
            repositoryUsername = properties.getProperty("SONATYPE_NEXUS_USERNAME")
            repositoryPassword = properties.getProperty("SONATYPE_NEXUS_PASSWORD")
        }

        installArchives {
            releaseRepositoryUrl = file("${rootProject.buildDir}/localMaven").toURI().toString()
            snapshotRepositoryUrl = file("${rootProject.buildDir}/localMaven").toURI().toString()
        }
    }
}