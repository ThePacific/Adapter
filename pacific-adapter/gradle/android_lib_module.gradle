apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'
// apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.vanniktech.maven.publish'

android {

    libraryVariants.all {
        it.generateBuildConfigProvider.get().enabled = false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    coreLibraryDesugaring dep.desugaring

    compileOnly dep.injectAnnotation
    compileOnly dep.jetAnnotation
    compileOnly dep.javaxAnnotation
    compileOnly dep.findBugsJrs305

    testImplementation dep.kotlin.test
    testImplementation dep.kotlin.testJunit
    testImplementation dep.junit
    testImplementation dep.mockito
    testImplementation dep.truth
    androidTestImplementation dep.androidX.test.runner
    androidTestImplementation dep.androidX.testExt.junit
    androidTestImplementation dep.androidX.testExt.junitKtx
    androidTestImplementation dep.androidX.espresso.core
    androidTestImplementation dep.androidX.multidex.multidex
    androidTestImplementation dep.androidX.multidex.instrumentation

    implementation dep.kotlin.stdlibJdk8
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

mavenPublish {
    releaseSigningEnabled = true
    targets {
        uploadArchives {
            releaseRepositoryUrl = properties.getProperty("RELEASE_REPOSITORY_URL")
            snapshotRepositoryUrl = properties.getProperty("SNAPSHOT_REPOSITORY_URL")
            repositoryUsername = properties.getProperty("SONATYPE_NEXUS_USERNAME")
            repositoryPassword = properties.getProperty("SONATYPE_NEXUS_PASSWORD")
        }

        installArchives {
            releaseRepositoryUrl = file("${rootProject.buildDir}/localMaven").toURI().toString()
            snapshotRepositoryUrl = file("${rootProject.buildDir}/localMaven").toURI().toString()
        }
    }
}